require File.expand_path(File.dirname(__FILE__) + '/../../spec_helper')

describe Admin::UsersController do
  integrate_views
  
  before :all do
    @user = User.find_or_create_by_username 'betty'
    @user.update_attribute :password, 'crocker'
  end

  describe '#create' do
    before :each do
      post :create, :user => { :username => 'bill', :password => '' }
    end
    
    it 'should assign a new random password' do
      user = User.find_by_username 'bill'
      user.should_not be_nil
      user.password.should_not == ''
    end
  end
  
  describe '#destroy' do
    before :each do
      post :destroy, :id => @user.id
    end
    
    it 'should destroy the user' do
      User.find_by_id(@user.id).should be_nil
    end
  end
  
  describe '#edit' do
    before :each do
      get :edit, :id => @user.id
    end
    
    it 'should show the default text input for password' do
      response.body.should match(%r|<input[^>]*name="user\[password\]"|)
    end
    
    it 'should show a reset password checkbox' do
      response.should have_tag("input[type=checkbox][name=reset_password]")
    end
  end
  
  describe '#index' do
    before :each do
      get :index
    end
    
    it 'should show a Delete link, a link to the profile page and a link generated from polymorphic_path' do
      response.should have_tag('td') do
        with_tag("a[href=#][onclick*='new Ajax.Request']", :text => 'Delete')
        with_tag(
          "a[href=?]",
          "/admin/blog_posts/new?blog_post%5Buser_id%5D=#{@user.id}",
          :text => "New blog post"
        )
        with_tag(
          "a[href=?]",
          "/admin/users/#{@user.id}/foo",
          :text => "Quux"
        )
      end
    end
  end
  
  describe '#new' do
    before :each do
      get :new
    end
    
    it 'should not show an input for password' do
      response.body.should match(/autogenerated/)
      response.body.should_not match(%r|<input[^>]*name="user\[password\]"|)
    end
    
    it 'should not show a reset password checkbox' do
      response.should_not have_tag("input[type=checkbox][name=reset_password]")
    end
    
    it 'should use date dropdowns with nil defaults for birthday' do
      nums_and_dt_fields = {1 => :year, 2 => :month, 3 => :day}
      nums_and_dt_fields.each do |num, dt_field|
        name = "user[birthday(#{num}i)]"
        response.should have_tag('select[name=?]', name) do
          with_tag "option[value='']"
          with_tag(
            "option:not([selected])[value=?]", Time.now.send(dt_field).to_s
          )
        end
      end
    end
    
    it 'should not try to set an hour or minute for birthday' do
      nums_and_dt_fields = {4 => :hour, 5 => :min}
      nums_and_dt_fields.each do |num, dt_field|
        name = "blog_post[published_at(#{num}i)]"
        response.should_not have_tag('select[name=?]', name)
      end
    end
    
    it 'should show a drop-down for US states' do
      response.should have_tag('select[name=?]', 'user[state]') do
        with_tag "option[value='']"
        with_tag "option:not([selected])[value=AK]", :text => 'Alaska'
        with_tag "option:not([selected])[value=NY]", :text => 'New York'
        # blank option, 50 states, DC, Puerto Rico == 53 options
        with_tag "option", :count => 53
      end
    end
  end
  
  describe '#update' do
    before :each do
      post :update, :id => @user.id, :user => {:username => 'bettie'}
    end
    
    it 'should not assign a new random password' do
      @user.reload
      @user.password.should == 'crocker'
    end
  end
  
  describe '#update while resetting password' do
    before :each do
      post(
        :update, :id => @user.id, :user => {:username => 'bettie'}, 
        :reset_password => '1'
      )
    end
    
    it 'should assign a new random password' do
      @user.reload
      @user.password.should_not == 'crocker'
    end
  end
end
